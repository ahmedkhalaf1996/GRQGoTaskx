package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"

	"github.com/ahmedkhalaf1996/GRQGoTaskx/graph/generated"
	"github.com/ahmedkhalaf1996/GRQGoTaskx/graph/model"
	"github.com/ahmedkhalaf1996/GRQGoTaskx/middleware"
	"github.com/ahmedkhalaf1996/GRQGoTaskx/models"

	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*models.Todo, error) {
	id, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		fmt.Println("not authendicatied me here")
		return nil, errors.New("not authenticated")
	}
	// get user from auth
	var userFromAuth models.User
	err = r.DB.First(&userFromAuth, "id = ?", id).Error
	if err != nil {
		return nil, errors.New("user not found")
	}

	// get user by given input user id
	var user models.User
	err = r.DB.First(&user, "id = ?", input.UserID).Error
	if err != nil {
		return nil, errors.New("given user id not found")
	}

	// make sure that we have the same user
	if user.ID != userFromAuth.ID {
		return nil, errors.New("un Authorized , given user id is diffrent than you provided as token")
	}

	if len(input.Text) < 3 {
		return nil, errors.New("text not long enough")
	}

	if input.UserID == "" {
		return nil, errors.New("missing provide creator id")
	}

	todo := &models.Todo{
		Text:   input.Text,
		Done:   false,
		UserID: input.UserID,
	}

	r.DB.Create(&todo)

	return todo, nil
}

// MarkComplete is the resolver for the markComplete field.
func (r *mutationResolver) MarkComplete(ctx context.Context, todoID string) (*models.Todo, error) {
	id, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		fmt.Println("not authendicatied me here")
		return nil, errors.New("not authenticated")
	}
	// get user from auth
	var userFromAuth models.User
	err = r.DB.First(&userFromAuth, "id = ?", id).Error
	if err != nil {
		return nil, errors.New("user not found")
	}

	if todoID == "" {
		return nil, errors.New("missing provide todo id")
	}

	todo := models.Todo{}
	err = r.DB.First(&todo, "id = ?", todoID).Error
	//

	if err != nil {
		return nil, errors.New("todo not found")
	}

	// make sure that we have the owner ..
	if fmt.Sprint(userFromAuth.ID) != todo.UserID {
		return nil, errors.New("un authorized , authenticated user diffrent than the owner of the todo")
	}

	newTodo := todo
	newTodo.Done = true
	r.DB.Model(&todo).Updates(&newTodo)

	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	ids, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		fmt.Println("not authendicatied me here")
		return false, errors.New("not authenticated")
	}
	// get user from auth
	var userFromAuth models.User
	err = r.DB.First(&userFromAuth, "id = ?", ids).Error
	if err != nil {
		return false, errors.New("user not found")
	}

	todo := models.Todo{}
	err = r.DB.First(&todo, "id = ?", id).Error
	//

	if err != nil {
		return false, errors.New("todo not found")
	}

	// make sure that we have the owner ..
	if fmt.Sprint(userFromAuth.ID) != todo.UserID {
		return false, errors.New("un authorized , authenticated user diffrent than the owner of the todo")
	}

	r.DB.Delete(&todo)

	return true, nil

}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	var todos []*models.Todo
	r.DB.Find(&todos)
	return todos, nil
}

// ID is the resolver for the id field.
func (r *todoResolver) ID(ctx context.Context, obj *models.Todo) (string, error) {
	return fmt.Sprint(obj.ID), nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *models.Todo) (*models.User, error) {
	// TODO DATALOADER
	return getUserLoader(ctx).Load(obj.UserID)

}

// Todo returns generated.TodoResolver implementation.
func (r *Resolver) Todo() generated.TodoResolver { return &todoResolver{r} }

type todoResolver struct{ *Resolver }
